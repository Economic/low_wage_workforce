---
output: html_document
format:
  html:
    echo: false
    page-layout: article
---

::: {.grid style="gap:unset"}

::: {.g-col-12 .g-col-md-6}
```{ojs}
viewof threshold = Range([d3.min(thresholds), d3.max(thresholds)], {
  step: 1,
  value: 15,
  format: (x) => "$" + x,
  label: "Threshold"
})
```
:::

::: {.g-col-12 .g-col-md-6}
```{ojs}
viewof outcome = Inputs.radio(
  new Map([["Share of workers", "share"], ["Number of workers", "count"]]), {
    value: "share"
})
```
:::

:::

```{r}
#| message: false
library(tidyverse)
library(reactable)

state_map <- read_csv("state_map.csv")

data_r <- read_csv("low_wage_data_states.csv") %>% 
  inner_join(state_map, by = "state_abb") %>% 
  rename(value = low_wage_share) %>% 
  mutate(value = if_else(is.na(value), -1, value)) %>% 
  mutate(
    share_map = scales::label_percent(accuracy = 1)(value),
    share_map = if_else(value < 0, "", share_map),
    count_map = scales::label_comma()(low_wage_count),
    count_map = if_else(value < 0, "", count_map),
    share_table = if_else(value < 0, "NA", share_map),
    count_table = if_else(value < 0, "NA", count_map)
  ) 

data_dates <- data_r |> 
  filter(row_number() == 1) |> 
  pull(dates)

ojs_define(data_ojs = data_r)
```

```{ojs}
//| include: false
data = transpose(data_ojs)

thresholds = [...new Set(data.map((item) => item.low_wage_threshold))]

filtered = data.filter(d => {
  return d.low_wage_threshold == threshold
})

// Update table data when filtered data changes
Reactable.setData('tbl', filtered)
```

## \${outcome == "share" ? "Share" : "Number"} of workers paid less than \$\${threshold} per hour

```{ojs}
Plot.plot({
  margin: 0,
  width: 790,
  height: 540,
  x: {
    axis: "top",
    label: null,
    ticks: null
  },
  y: {
    label: null,
    ticks: null
  },
  color: {
    type: "threshold",
    //scheme: "oranges",
    range: ["#d9d9d9", "#fdd0a2", "#fdae6b", "#fd8d3c", "#e6550d", "#d94801"],
    domain: [0, 0.15, 0.3, 0.45, 0.6]
  },
  marks: [
    Plot.cell(filtered, {
      x: "col",
      y: "row",   
      fill: (d) => d.value,
      rx: 10 // uncomment for circles
    }),
    Plot.text(filtered, {
      x: "col",
      y: "row",
      fontWeight: "bold",
      text: outcome == "share" ? (d) => `${d.state_abb}\n${d.share_map}` : (d) => `${d.state_abb}\n${d.count_map}`
    })
  ]
})
```

Low-Wage Workforce Tracker, Economic Policy Institute, March 2023, <https://economic.github.io/low_wage_workforce>.

Notes: Analysis by [Ben Zipperer](https://www.epi.org/people/ben-zipperer/) of the Economic Policy Institute Current Population Survey [extracts](https://microdata.epi.org/), `r data_dates`. Wages include overtime, tips, and commissions. Data is not shown for states where the threshold less than $1 above the state's minimum wage. Download the [data](low_wage_data_states.csv) shown in the figure above or the [code](https://github.com/Economic/low_wage_workforce) that produces it.

## Workers paid less than \$\${threshold} per hour, by state
```{r}
#| message: false
reactable(
  select(data_r, state_name, share_table, count_table),
  sortable = FALSE,
  wrap = FALSE,
  pagination = FALSE,
  elementId = "tbl",
  columns = list(
    state_name = colDef(
      name = "State",
      align = "left",
      minWidth = 200,
    ),
    share_table = colDef(
      name = "Share",
      html = TRUE,
      align = "right",
      minWidth = 100,
    ),
    count_table = colDef(
      name = "Number",
      html = TRUE,
      align = "right",
      minWidth = 100,
    )
  ),
)
```


```{ojs}
function Range(range, options = {}) {
  const [min, max] = range;
  const {
    className = "Range",
    vertical = false,
    label = null,
    format = (x) => +x,
    step = 1,
    value = (min + max) / 2,
    style = "",
    labelStyle = "",
    rangeStyle = "",
    valueStyle = ""
  } = options;
  const rangeWrap = htl.html`<div class=${className} style="${style}"></div>`;
  Object.assign(rangeWrap.style, {
    display: "inline-flex",
    position: "relative",
    userSelect: "none"
  });
  const valueDisplay = htl.html`<output style="${valueStyle}">`;
  Object.assign(valueDisplay.style, {
    display: "inline-block"
  });
  const rangeInput = htl.html`<input type=range min=${min} max=${max} step=${step} value=${value} style=${rangeStyle}>`;
  Object.assign(rangeInput.style, {
    display: "inline-block"
  });
  if (vertical) {
    rangeInput.setAttribute("orient", "vertical");
    rangeInput.style.writingMode = "bt-lr"; /* IE */
    rangeInput.style["-webkit-appearance"] = "slider-vertical"; /* WebKit */
    rangeInput.style.width = "8px";
  }

  rangeWrap.append(rangeInput, valueDisplay);

  if (label) rangeWrap.prepend(htl.html`<label style=${labelStyle}>${label}`);

  rangeInput.oninput = () => {
    valueDisplay.innerHTML = format(rangeInput.valueAsNumber);
    rangeWrap.value = rangeWrap.valueAsNumber = +rangeInput.valueAsNumber;
    rangeWrap.dispatchEvent(new CustomEvent("input"));
  };

  rangeInput.oninput();
  return rangeWrap;
}

rangeStyles = htl.html`<style>
  .Range, .Popup {
     display: inline-flex;
     align-items:center;
  }
  .Range input[type=range] {
     width:100px;
  }
  .Range input[type=range][orient=vertical] {
     width:8px;
     height:100px;
  }
  .Range label {
     margin-right: 5px;
  }
  .Range output {
     margin-left: 5px;
  }
  .Popup button{
   margin-right:10px;
  }
</style>
`
```