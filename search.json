[
  {
    "objectID": "states.html",
    "href": "states.html",
    "title": "Low-wage workforce tracker",
    "section": "",
    "text": "viewof threshold = Range([d3.min(thresholds), d3.max(thresholds)], {\n  step: 1,\n  value: 15,\n  format: (x) =&gt; \"$\" + x,\n  label: \"Threshold\"\n})\n\n\n\n\n\n\n\n\n\nviewof outcome = Inputs.radio(\n  new Map([[\"Share of workers\", \"share\"], [\"Number of workers\", \"count\"]]), {\n    value: \"share\"\n})\ndata = transpose(data_ojs)\n\nthresholds = [...new Set(data.map((item) =&gt; item.low_wage_threshold))]\n\nfiltered = data.filter(d =&gt; {\n  return d.low_wage_threshold == threshold\n})\n\n// Update table data when filtered data changes\nReactable.setData('tbl', filtered)"
  },
  {
    "objectID": "states.html#outcome-share-share-number-of-workers-paid-less-than-threshold-per-hour",
    "href": "states.html#outcome-share-share-number-of-workers-paid-less-than-threshold-per-hour",
    "title": "Low-wage workforce tracker",
    "section": " of workers paid less than $ per hour",
    "text": "of workers paid less than $ per hour\n\nPlot.plot({\n  margin: 0,\n  width: 790,\n  height: 540,\n  x: {\n    axis: \"top\",\n    label: null,\n    ticks: null\n  },\n  y: {\n    label: null,\n    ticks: null\n  },\n  color: {\n    type: \"threshold\",\n    //scheme: \"oranges\",\n    range: [\"#d9d9d9\", \"#fdd0a2\", \"#fdae6b\", \"#fd8d3c\", \"#e6550d\", \"#d94801\"],\n    domain: [0, 0.15, 0.3, 0.45, 0.6]\n  },\n  marks: [\n    Plot.cell(filtered, {\n      x: \"col\",\n      y: \"row\",   \n      fill: (d) =&gt; d.value,\n      rx: 10 // uncomment for circles\n    }),\n    Plot.text(filtered, {\n      x: \"col\",\n      y: \"row\",\n      fontWeight: \"bold\",\n      text: outcome == \"share\" ? (d) =&gt; `${d.state_abb}\\n${d.share_map}` : (d) =&gt; `${d.state_abb}\\n${d.count_map}`\n    })\n  ]\n})\n\n\n\n\n\n\nLow-Wage Workforce Tracker, Economic Policy Institute, March 2023, https://economic.github.io/low_wage_workforce.\nNotes: Analysis by Ben Zipperer of the Economic Policy Institute Current Population Survey extracts, January 2022 through December 2022. Wages include overtime, tips, and commissions. Data is not shown for states where the threshold less than $1 above the stateâ€™s minimum wage. Download the data shown in the figure above or the code that produces it."
  },
  {
    "objectID": "states.html#workers-paid-less-than-threshold-per-hour-by-state",
    "href": "states.html#workers-paid-less-than-threshold-per-hour-by-state",
    "title": "Low-wage workforce tracker",
    "section": "Workers paid less than $ per hour, by state",
    "text": "Workers paid less than $ per hour, by state\n\n\n\n\n\n\n\n\nfunction Range(range, options = {}) {\n  const [min, max] = range;\n  const {\n    className = \"Range\",\n    vertical = false,\n    label = null,\n    format = (x) =&gt; +x,\n    step = 1,\n    value = (min + max) / 2,\n    style = \"\",\n    labelStyle = \"\",\n    rangeStyle = \"\",\n    valueStyle = \"\"\n  } = options;\n  const rangeWrap = htl.html`&lt;div class=${className} style=\"${style}\"&gt;&lt;/div&gt;`;\n  Object.assign(rangeWrap.style, {\n    display: \"inline-flex\",\n    position: \"relative\",\n    userSelect: \"none\"\n  });\n  const valueDisplay = htl.html`&lt;output style=\"${valueStyle}\"&gt;`;\n  Object.assign(valueDisplay.style, {\n    display: \"inline-block\"\n  });\n  const rangeInput = htl.html`&lt;input type=range min=${min} max=${max} step=${step} value=${value} style=${rangeStyle}&gt;`;\n  Object.assign(rangeInput.style, {\n    display: \"inline-block\"\n  });\n  if (vertical) {\n    rangeInput.setAttribute(\"orient\", \"vertical\");\n    rangeInput.style.writingMode = \"bt-lr\"; /* IE */\n    rangeInput.style[\"-webkit-appearance\"] = \"slider-vertical\"; /* WebKit */\n    rangeInput.style.width = \"8px\";\n  }\n\n  rangeWrap.append(rangeInput, valueDisplay);\n\n  if (label) rangeWrap.prepend(htl.html`&lt;label style=${labelStyle}&gt;${label}`);\n\n  rangeInput.oninput = () =&gt; {\n    valueDisplay.innerHTML = format(rangeInput.valueAsNumber);\n    rangeWrap.value = rangeWrap.valueAsNumber = +rangeInput.valueAsNumber;\n    rangeWrap.dispatchEvent(new CustomEvent(\"input\"));\n  };\n\n  rangeInput.oninput();\n  return rangeWrap;\n}\n\nrangeStyles = htl.html`&lt;style&gt;\n  .Range, .Popup {\n     display: inline-flex;\n     align-items:center;\n  }\n  .Range input[type=range] {\n     width:100px;\n  }\n  .Range input[type=range][orient=vertical] {\n     width:8px;\n     height:100px;\n  }\n  .Range label {\n     margin-right: 5px;\n  }\n  .Range output {\n     margin-left: 5px;\n  }\n  .Popup button{\n   margin-right:10px;\n  }\n&lt;/style&gt;\n`"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "How many low-wage workers are in the US?",
    "section": "",
    "text": "viewof category = Inputs.select(categories, {value: \"All Workers\", label: \"Category\"})\n\n\n\n\n\n\n\n\n\nviewof threshold = Range([d3.min(thresholds), d3.max(thresholds)], {\n  step: 1,\n  value: 15,\n  format: (x) =&gt; \"$\" + x,\n  label: \"Threshold\"\n})\nlow_wage_data = transpose(low_wage_data_r)\n\noverall_count = low_wage_data.find(x =&gt; x.low_wage_threshold == threshold & x.category_group == \"All workers\").count\n\noverall_count_formatted = d3.format(\".0f\")(overall_count / 10**6)\n\nthresholds = [...new Set(low_wage_data.map((item) =&gt; item.low_wage_threshold))]\n\ncategories = [...new Set(low_wage_data.map((item) =&gt; item.category_group))]\n\nd3 = require.alias({\n  \"d3-drag\": \"d3@7\",\n  \"d3-ease\": \"d3@7\",\n  \"d3-selection\": \"d3@7\",\n})(\"d3@7\", \"d3-simple-slider\")\n\nlow_wage_filtered = low_wage_data.filter(d =&gt; d.low_wage_threshold == threshold & d.category_group == category)\n\n// Update table data when filtered data changes\nReactable.setData('tbl', low_wage_filtered)"
  },
  {
    "objectID": "index.html#overall_count_formatted-million-workers-are-paid-less-than-threshold-per-hour",
    "href": "index.html#overall_count_formatted-million-workers-are-paid-less-than-threshold-per-hour",
    "title": "How many low-wage workers are in the US?",
    "section": " million workers are paid less than $ per hour",
    "text": "million workers are paid less than $ per hour\n\n\n\n\n\n\n\n\nLow-Wage Workforce Tracker, Economic Policy Institute, March 2023, https://economic.github.io/low_wage_workforce.\nNotes: Analysis by Ben Zipperer of the Economic Policy Institute Current Population Survey extracts, January 2022 through December 2022. Wages include overtime, tips, and commissions. Download the data shown in the figure above or the code that produces it.\n\nfunction Range(range, options = {}) {\n  const [min, max] = range;\n  const {\n    className = \"Range\",\n    vertical = false,\n    label = null,\n    format = (x) =&gt; +x,\n    step = 1,\n    value = (min + max) / 2,\n    style = \"\",\n    labelStyle = \"\",\n    rangeStyle = \"\",\n    valueStyle = \"\"\n  } = options;\n  const rangeWrap = htl.html`&lt;div class=${className} style=\"${style}\"&gt;&lt;/div&gt;`;\n  Object.assign(rangeWrap.style, {\n    display: \"inline-flex\",\n    position: \"relative\",\n    userSelect: \"none\"\n  });\n  const valueDisplay = htl.html`&lt;output style=\"${valueStyle}\"&gt;`;\n  Object.assign(valueDisplay.style, {\n    display: \"inline-block\"\n  });\n  const rangeInput = htl.html`&lt;input type=range min=${min} max=${max} step=${step} value=${value} style=${rangeStyle}&gt;`;\n  Object.assign(rangeInput.style, {\n    display: \"inline-block\"\n  });\n  if (vertical) {\n    rangeInput.setAttribute(\"orient\", \"vertical\");\n    rangeInput.style.writingMode = \"bt-lr\"; /* IE */\n    rangeInput.style[\"-webkit-appearance\"] = \"slider-vertical\"; /* WebKit */\n    rangeInput.style.width = \"8px\";\n  }\n\n  rangeWrap.append(rangeInput, valueDisplay);\n\n  if (label) rangeWrap.prepend(htl.html`&lt;label style=${labelStyle}&gt;${label}`);\n\n  rangeInput.oninput = () =&gt; {\n    valueDisplay.innerHTML = format(rangeInput.valueAsNumber);\n    rangeWrap.value = rangeWrap.valueAsNumber = +rangeInput.valueAsNumber;\n    rangeWrap.dispatchEvent(new CustomEvent(\"input\"));\n  };\n\n  rangeInput.oninput();\n  return rangeWrap;\n}\n\nrangeStyles = htl.html`&lt;style&gt;\n  .Range, .Popup {\n     display: inline-flex;\n     align-items:center;\n  }\n  .Range input[type=range] {\n     width:100px;\n  }\n  .Range input[type=range][orient=vertical] {\n     width:8px;\n     height:100px;\n  }\n  .Range label {\n     margin-right: 5px;\n  }\n  .Range output {\n     margin-left: 5px;\n  }\n  .Popup button{\n   margin-right:10px;\n  }\n&lt;/style&gt;\n`"
  },
  {
    "objectID": "historical.html",
    "href": "historical.html",
    "title": "Historical trends of low-wage workers in the US",
    "section": "",
    "text": "low_wage_data = FileAttachment(\"low_wage_data_historical.csv\").csv({ typed: true })\n\n\n\n\n\n\n\n\n\n\n&lt;!-- add data download button --&gt;\n&lt;!-- https://observablehq.com/@jeremiak/download-data-button --&gt;\n\nviewof outcome = Inputs.radio(\n  new Map([[\"Share of workers\", \"share\"], [\"Number of workers\", \"count\"]]), {\n    value: \"share\"\n})\n\n\n\n\n\n\n\n\n\nviewof threshold = Range([d3.min(thresholds), d3.max(thresholds)], {\n  step: 1,\n  value: 15,\n  format: (x) =&gt; \"$\" + x,\n  label: \"Threshold\"\n})\n\n\n\n\n\n\n\n\n\nviewof category = Inputs.radio(\n  new Map([[\"Nominal threshold\", \"nominal\"], [\"Real threshold\", \"real\"]]), {\n    value: \"nominal\"\n})\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;!-- use t/f logic to set values, like in celsius example from --&gt;\n&lt;!-- https://observablehq.com/@observablehq/plot-scales#celsius --&gt;\n\nPlot.plot({\n  &lt;!-- width: Math.max(width, 500), --&gt;\n  &lt;!-- height: Math.min(width, 1000), --&gt;\n  style: \"padding-top:1em; overflow:visible; font-size: 16px; padding-right:1.5em\",\n  y: {\n    grid: true,\n    domain: [0, max_value_12m*1.10],\n    label: outcome == \"share\" ? \"Percent of workforce earning less than $\" + threshold + \" \" + category_name: \"Millions of workers earning less than $\" + threshold + \" \" + category_name,\n    tickFormat: outcome == \"share\" ? \".0%\" : \".0f\"\n  },\n  x: {\n    label: null\n  },\n  marks: [\n    Plot.line(low_wage_filtered, {\n      x: \"month_date\", \n      y: \"value_12m\",\n    }),\n    Plot.text(low_wage_filtered, Plot.selectLast({\n      x: \"month_date\",\n      y: \"value_12m\",\n      text: outcome == \"share\" ? d =&gt; (d.value_12m * 100).toFixed(1) + '%' : d =&gt; (d.value_12m).toFixed(1) + 'm',\n      textAnchor: \"start\",\n      dx: -20,\n      dy: -20\n    })),\n    Plot.dot(low_wage_filtered, Plot.selectLast({\n      x: \"month_date\",\n      y: \"value_12m\",\n    }))\n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\noverall_count = low_wage_data.find(x =&gt; x.low_wage_threshold == threshold & x.category_group == \"All workers\").count\n\noverall_count_formatted = d3.format(\".0f\")(overall_count / 10**6)\n\nthresholds = [...new Set(low_wage_data.map((item) =&gt; item.threshold_nominal))]\n\ncategories = [...new Set(low_wage_data.map((item) =&gt; item.threshold_type))]\n\noutcomes = [...new Set(low_wage_data.map((item) =&gt; item.name))]\n\nd3 = require.alias({\n  \"d3-drag\": \"d3@7\",\n  \"d3-ease\": \"d3@7\",\n  \"d3-selection\": \"d3@7\",\n})(\"d3@7\", \"d3-simple-slider\")\n\nlow_wage_filtered = low_wage_data.filter(d =&gt; d.threshold_nominal == threshold & d.name == outcome & d.threshold_type == category)\n\nrange_value_category = [...new Set(low_wage_data.filter(d =&gt; d.name == outcome).map((item) =&gt; item.value_12m))]\n\nmax_value_12m = Math.max(...range_value_category)\n\ncategory_name = category == \"nominal\" ? \"(nominal)\" : \"(inflation-adjusted)\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction Range(range, options = {}) {\n  const [min, max] = range;\n  const {\n    className = \"Range\",\n    vertical = false,\n    label = null,\n    format = (x) =&gt; +x,\n    step = 1,\n    value = (min + max) / 2,\n    style = \"\",\n    labelStyle = \"\",\n    rangeStyle = \"\",\n    valueStyle = \"\"\n  } = options;\n  const rangeWrap = htl.html`&lt;div class=${className} style=\"${style}\"&gt;&lt;/div&gt;`;\n  Object.assign(rangeWrap.style, {\n    display: \"inline-flex\",\n    position: \"relative\",\n    userSelect: \"none\"\n  });\n  const valueDisplay = htl.html`&lt;output style=\"${valueStyle}\"&gt;`;\n  Object.assign(valueDisplay.style, {\n    display: \"inline-block\"\n  });\n  const rangeInput = htl.html`&lt;input type=range min=${min} max=${max} step=${step} value=${value} style=${rangeStyle}&gt;`;\n  Object.assign(rangeInput.style, {\n    display: \"inline-block\"\n  });\n  if (vertical) {\n    rangeInput.setAttribute(\"orient\", \"vertical\");\n    rangeInput.style.writingMode = \"bt-lr\"; /* IE */\n    rangeInput.style[\"-webkit-appearance\"] = \"slider-vertical\"; /* WebKit */\n    rangeInput.style.width = \"8px\";\n  }\n\n  rangeWrap.append(rangeInput, valueDisplay);\n\n  if (label) rangeWrap.prepend(htl.html`&lt;label style=${labelStyle}&gt;${label}`);\n\n  rangeInput.oninput = () =&gt; {\n    valueDisplay.innerHTML = format(rangeInput.valueAsNumber);\n    rangeWrap.value = rangeWrap.valueAsNumber = +rangeInput.valueAsNumber;\n    rangeWrap.dispatchEvent(new CustomEvent(\"input\"));\n  };\n\n  rangeInput.oninput();\n  return rangeWrap;\n}\n\nrangeStyles = htl.html`&lt;style&gt;\n  .Range, .Popup {\n     display: inline-flex;\n     align-items:center;\n  }\n  .Range input[type=range] {\n     width:100px;\n  }\n  .Range input[type=range][orient=vertical] {\n     width:8px;\n     height:100px;\n  }\n  .Range label {\n     margin-right: 5px;\n  }\n  .Range output {\n     margin-left: 5px;\n  }\n  .Popup button{\n   margin-right:10px;\n  }\n&lt;/style&gt;\n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLow-Wage Workforce Tracker, Economic Policy Institute, March 2023, https://economic.github.io/low_wage_workforce.\nNotes: Analysis by Ben Zipperer of the Economic Policy Institute Current Population Survey extracts. Wages include overtime, tips, and commissions. Values are 12-month smoothed shares or counts of workers earning under a given threshold. Real thresholds are in December 2022 dollars. Download the data shown in the figure above or the code that produces it."
  }
]